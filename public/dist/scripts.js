"use strict";$(function(){var e=null;function s(){0===$("li.trackList.highlight").prev().length?$("#trackPrev").addClass("inactive"):$("#trackPrev").removeClass("inactive"),0===$("li.trackList.highlight").next().length?$("#trackNext").addClass("inactive"):$("#trackNext").removeClass("inactive"),0===$("li.trackList.highlight").prev().length&&0===$("li.trackList.highlight").next().length&&$("#trackShuffle").addClass("inactive")}$(document).foundation(),$(".screenText").slick({dots:!0,infinite:!0,speed:500,fade:!0,cssEase:"linear"}),window.location.pathname.indexOf("play")&&$("#audioPlayer").mediaelementplayer({stretching:"responsive",pluginPath:"../js/lib/build/",success:function(a,t,r){e=a,s(),$(a).on("ended",function(){if($("#trackShuffle").hasClass("active")){var t=$("li.trackList").length,r=Math.floor(Math.random()*t+1);(n=$("li.trackList:nth-child("+r+")")).hasClass("highlight")&&0===(n=n.next()).length&&(n=$("li.trackList:nth-child(1)")),n.click(),s()}else{var n=$("li.trackList.highlight").next();$("#trackRepeat").hasClass("active")?a.play():0===n.length?function(s){$(".trackList").removeClass("highlight"),$(".trackItem").removeClass("fi-sound"),s.addClass("highlight"),s.find(".trackItem").addClass("fi-sound");var a=s.data("track-src");e.setSrc(a),e.load()}($("li.trackList").first()):n.click(),s()}})},error:function(e,s){alert("There is some error at the server playing the track!")}}),$(window).on("load resize",function(){$("#footer");$(".title-bar").is(":visible")?$("#index-menu").removeClass("addFloat"):$("#index-menu").addClass("addFloat");$(window).width()<400?($(".menuDiv").addClass("menuMode"),$("#user-menu").removeClass("show")):($("#user-menu").removeClass("show"),$("#user-menu").css("width","180px"),$(".close-icon").remove(),$(".menuDiv").removeClass("menuMode"))}),$("#login").on("submit",function(e){e.preventDefault(),l();var s=$("#userName").val(),a=$("#userPassword").val();if(0!==s.length&&0!==a.length){var t=/^[a-zA-Z0-9._]{1,30}$/.test(s);t?$.post("/login",{username:s,password:a}).fail(function(e){var s=e.responseJSON;400===e.status&&d(s[0].msg,"error"),401===e.status&&d(s.msg,"error")}).done(function(e){window.location.href="/user/home"}):(c("userName"),d("Usernames can only use letters, numbers, underscores and periods.","error"))}else 0===s.length&&(c("userName"),$("#emptyFields").removeClass("hide")),0==a.length&&(c("userPassword"),$("#emptyFields").removeClass("hide"))}),$("#editProfile").on("submit",function(e){e.preventDefault(),l();var s=$("#userName").val(),a=$("#email").val();if(0!==s.length&&0!==a.length){var t=/^[a-zA-Z0-9._]{1,30}$/.test(s);t?$.post("/user/editProfile",{username:s,email:a}).fail(function(e){if(400===e.status){var s=e.responseJSON;s.length>=1?d(s[0].msg,"error"):d(s.msg,"error")}}).done(function(e){d(e.msg,"msg"),$("#loginLink").removeClass("hide"),$(".btns").addClass("hide")}):(c("userName"),d("Usernames can only use letters, numbers, underscores and periods.","error"))}else 0===s.length&&(c("userName"),$("#emptyFields").removeClass("hide")),0==a.length&&(c("email"),$("#emptyFields").removeClass("hide"))}),$("#confirmUser").on("submit",function(e){e.preventDefault(),l();var s=$("#username").val();0!==s.length?$.post("/verifyUser",{username:s}).fail(function(e){if(401===e.status){var s=e.responseJSON;d(s.msg,"error")}}).done(function(e){$("#username").val(""),$("#forgotPassword").removeClass("hide"),$("#confirmUser").addClass("hide"),a=e}):0===s.length&&(c("username"),$("#emptyFields").removeClass("hide"))}),$("#forgotPassword").on("submit",function(e){e.preventDefault(),l();var s=$("#newPassword").val(),t=$("#confirmPassword").val();0===s.length&&(c("newPassword"),$("#emptyFields").removeClass("hide"));0===t.length&&(c("confirmPassword"),$("#emptyFields").removeClass("hide"));0!==s.length&&t!==s&&(c("confirmPassword"),$("#emptyFields").addClass("hide"),d("Confirm password doesn't match with the new password","error"));0!==s.length&&0!==t.length&&s===t&&$.post("/forgotPassword",{newPassword:s,user:a}).fail(function(e){if(400===e.status){var s=e.responseJSON;d(s.msg,"error")}}).done(function(e){d(e.msg,"msg"),$(".btns").addClass("hide"),$("#loginLink").removeClass("hide")})}),$("#signup").on("submit",function(e){e.preventDefault(),l();var s=$("#userName").val(),a=$("#userEmail").val(),t=$("#userPassword").val(),r=$("#confirmPassword").val(),n=/^[a-zA-Z0-9._]{1,30}$/.test(s);0===s.length&&(c("userName"),$("#emptyFields").removeClass("hide"));n||0===s.length||(c("userName"),d("Usernames can only use letters, numbers, underscores and periods.","error"));0===a.length&&(c("userEmail"),$("#emptyFields").removeClass("hide"));0===t.length&&(c("userPassword"),$("#emptyFields").removeClass("hide"));0===r.length&&(c("confirmPassword"),$("#emptyFields").removeClass("hide"));0!==t.length&&0!==r.length&&r!==t&&(c("confirmPassword"),$("#emptyFields").addClass("hide"),d("Confirm password doesn't match with password","error"),0!==a.length&&0!==s.length||$("#emptyFields").removeClass("hide"));0!==s.length&&0!==t.length&&0!==r.length&&0!==a.length&&t===r&&n&&$.post("/signup",{username:s,password:t,email:a}).fail(function(e){if(400===e.status){var s=e.responseJSON;s.length>=1?d(s[0].msg,"error"):d(s.msg,"error")}}).done(function(e){d(e.msg,"msg"),$(".btns").addClass("hide"),$("#loginLink").removeClass("hide")})}),$("#reset").on("click",l),$("#changePassword").on("submit",function(e){e.preventDefault(),l();var s=$("#oldPassword").val(),a=$("#newPassword").val(),t=$("#confirmPassword").val();0===s.length&&(c("oldPassword"),$("#emptyFields").removeClass("hide"));0===a.length&&(c("newPassword"),$("#emptyFields").removeClass("hide"));0===t.length&&(c("confirmPassword"),$("#emptyFields").removeClass("hide"));0!==a.length&&0!==t.length&&t!==a&&(c("confirmPassword"),$("#emptyFields").addClass("hide"),d("Confirm password doesn't match with the new password","error"),0===s.length&&$("#emptyFields").removeClass("hide"));0!==s.length&&0!==a.length&&0!==t.length&&a===t&&$.post("/user/changePassword",{oldPassword:s,newPassword:a}).fail(function(e){if(400===e.status){var s=e.responseJSON;d(s.msg,"error")}}).done(function(e){d(e.msg,"msg"),$(".btns").addClass("hide"),$("#loginLink").removeClass("hide")})}),$("#searchIcon").on("click",t),$(".js-search-close").on("click",function(e){e.preventDefault(),$("#search-text").val(""),$("#headerDiv").removeClass("hide").addClass("show"),$("#search").removeClass("show"),$(".js-nonSearchView").removeClass("hide"),$(".js-searchView").addClass("hide"),-1===window.location.pathname.indexOf("user")&&(window.location.pathname="/user/home")}),$(".menuDiv").on("click",function(e){e.preventDefault(),$("#user-menu").hasClass("show")?$("#user-menu").removeClass("show"):$("#user-menu").addClass("show")}),$(".trackList").on("click",function(s){if(!$(this).hasClass("highlight")){$(".trackList").removeClass("highlight"),$(".trackItem").removeClass("fi-sound"),$(this).addClass("highlight"),$(this).find(".trackItem").addClass("fi-sound");var a=$(this).data("track-src");e.setSrc(a),e.load(),e.play()}}),$("#search-text").on("keyup",function(e){13===e.keyCode&&r(e)}),$(".js-search-icon").on("click",r),$("#trackRepeat").on("click",o),$("#trackLike").on("click",o),$("#trackPrev").on("click",function(e){e.preventDefault(),$(this).hasClass("inactive")||($("li.trackList.highlight").prev().click(),s())}),$("#trackNext").on("click",function(e){e.preventDefault(),$(this).hasClass("inactive")||($("li.trackList.highlight").next().click(),s())}),$("#trackShuffle").on("click",function(e){e.preventDefault(),$(this).hasClass("inactive")||$(this).toggleClass("active")}),$(document).on("click",".menuMode",function(e){e.preventDefault();var s=$("#user-menu");$("#user-menu").addClass("show"),s.css("width","250px"),s.prepend('<div class="close-icon"><i class="fi-x"></i></div>')}),$(document).on("click",".close-icon",function(e){e.preventDefault();var s=$("#user-menu");$("#user-menu").removeClass("show"),s.css("width","180px"),$(".close-icon").remove()}),$(document).on("click",".seeAllR",i);var a=null;function t(e){e&&e.preventDefault(),$("#headerDiv").removeClass("show").addClass("hide"),$("#search").addClass("show"),$(".js-nonSearchView").addClass("hide"),$(".js-searchView").removeClass("hide")}function r(e,s,a){null!==e&&e.preventDefault(),$(".js-searchView").empty();var t=void 0!==s?s:$.trim($("#search-text").val());(t=t.replace(/\s+/g," ")).length>0&&" "!==t&&$.post("/search/"+t).fail(function(e){console.log(e),$("#searchCont").html(e)}).done(function(e){if($("#searchCont").html(e),$("#js-searchResults").removeClass("hide"),void 0===a){var s="/search/"+t;history.pushState({search:t},"",s)}})}if(console.log(window.history.state),console.log(window.history),null!==window.history.state){var n=window.history.state;void 0!==n.search&&void 0===n.category?(t(),r(null,n.search,"noPopstate")):void 0!==n.search&&void 0!==n.category&&(t(),i(null,n.search,n.category,"noPopstate"))}function i(e,s,a,t){null!==e&&e.preventDefault();var r=void 0!==s?s:$(".searchStr").html(),n=void 0!==a?a:$(this).data("category");$.post("/search/"+n+"/"+r).fail(function(e){$("#searchCont").html(e)}).done(function(e){if($("#searchCont").html(e),$("#js-searchResults").removeClass("hide"),void 0===t){var s="/search/"+n+"/"+r;history.pushState({search:r,category:n},"",s)}})}function o(e){e.preventDefault(),$(this).toggleClass("active")}function l(){$("#error").empty(),$("#msg").empty(),$("#emptyFields").addClass("hide"),$(".icon-error").remove()}function d(e,s){var a=$("#msgcont");0===a.length&&(a=$("<ul id='msgcont'></ul>")),a.append("<li>"+e+"</li>"),$("#"+s).html(a)}function c(e){var s=$("#"+e),a=$("<span class='icon-error'><i class='fi-x-circle'></i></span>");s.after(a)}$(window).on("popstate",function(e){console.log(e);var s=e.originalEvent.state;if(null===s){var a=window.location.href;window.location.href=a}else void 0!==s.search&&void 0===s.category?(t(e),r(e,s.search,"noPopstate")):void 0!==s.search&&void 0!==s.category&&(t(e),i(e,s.search,s.category,"noPopstate"))})}());
//# sourceMappingURL=data:application/json;charset=utf8;base64,
